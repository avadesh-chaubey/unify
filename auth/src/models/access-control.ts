import mongoose from 'mongoose';
import {
	accessControl
} from '../interfaces/acesscontrol';


interface accessControl {
	url: String,
	id: Number,

}

interface AccessControlAttrs {
	id: String;
	admin: accessControl;
	hospitalUnit: accessControl,
	hospitalUnitFilters: accessControl,
	hospitalUnitEdit: accessControl,
	hospitalUnitStatus: accessControl,
	access: accessControl,
	accessPermission: accessControl,
	assignRole: accessControl,
	manageRoleandPermmission: accessControl,
	enableorDisableRole: accessControl,
	accessControlResponsibilities: accessControl,
	employeeAccessList: accessControl,
	employeeAccessListFilter: accessControl,
	employeeAccessListStatus: accessControl,
	employeeOnBoarding: accessControl,
	addNewDoctor: accessControl,
	addNewEmployee: accessControl,
	addNewRole: accessControl,
	addNewBanner: accessControl,
	addNewUnit: accessControl,
	addNewArticle: accessControl,
	addNewNotification: accessControl,
	addsettings: accessControl,
	profileManagement: accessControl,
	profile: accessControl,
	cms: accessControl,
	cmsFilters: accessControl,
	cmsDownload: accessControl,
	cmsPrint: accessControl,
	cmsPreview: accessControl,
	cmsCsv: accessControl,
	cmsPdf: accessControl,
	cmsSummary: accessControl,
	notificationManagement: accessControl,
	notificationManagementFilter: accessControl,
	notificationManagementDownload: accessControl,
	notificationManagementPrint: accessControl,
	notificationManagementPreview: accessControl,
	notificationManagementCsv: accessControl,
	notificationManagementPdf: accessControl,
	notificationManagementSummary: accessControl,
	bannerManagement: accessControl,
	bannerManagementFilter: accessControl,
	bannerManagementtDownload: accessControl,
	bannerManagementPrint: accessControl,
	bannerManagementPreview: accessControl,
	bannerManagementCsv: accessControl,
	bannerManagementPdf: accessControl,
	bannerManagementSummary: accessControl,
	settings: accessControl,
	general: accessControl,
	hospitalInformation: accessControl,
	pharmacy: accessControl,
	branches: accessControl,
}

export interface AccessControlDoc extends mongoose.Document {
	admin: accessControl;
	hospitalUnit: accessControl,
	hospitalUnitFilters: accessControl,
	hospitalUnitEdit: accessControl,
	hospitalUnitStatus: accessControl,
	access: accessControl,
	accessPermission: accessControl,
	assignRole: accessControl,
	manageRoleandPermmission: accessControl,
	enableorDisableRole: accessControl,
	accessControlResponsibilities: accessControl,
	employeeAccessList: accessControl,
	employeeAccessListFilter: accessControl,
	employeeAccessListStatus: accessControl,
	employeeOnBoarding: accessControl,
	addNewDoctor: accessControl,
	addNewEmployee: accessControl,
	addNewRole: accessControl,
	addNewBanner: accessControl,
	addNewUnit: accessControl,
	addNewArticle: accessControl,
	addNewNotification: accessControl,
	addsettings: accessControl,
	profileManagement: accessControl,
	profile: accessControl,
	cms: accessControl,
	cmsFilters: accessControl,
	cmsDownload: accessControl,
	cmsPrint: accessControl,
	cmsPreview: accessControl,
	cmsCsv: accessControl,
	cmsPdf: accessControl,
	cmsSummary: accessControl,
	notificationManagement: accessControl,
	notificationManagementFilter: accessControl,
	notificationManagementDownload: accessControl,
	notificationManagementPrint: accessControl,
	notificationManagementPreview: accessControl,
	notificationManagementCsv: accessControl,
	notificationManagementPdf: accessControl,
	notificationManagementSummary: accessControl,
	bannerManagement: accessControl,
	bannerManagementFilter: accessControl,
	bannerManagementtDownload: accessControl,
	bannerManagementPrint: accessControl,
	bannerManagementPreview: accessControl,
	bannerManagementCsv: accessControl,
	bannerManagementPdf: accessControl,
	bannerManagementSummary: accessControl,
	settings: accessControl,
	general: accessControl,
	hospitalInformation: accessControl,
	pharmacy: accessControl,
	branches: accessControl,

}

interface AccessControlModel extends mongoose.Model<AccessControlDoc> {
	build(attrs: AccessControlAttrs): AccessControlDoc;
	findByEvent(event: {
		id: string;
		version: number;
	}): Promise<AccessControlDoc | null>;
}

const accessControlSchema = new mongoose.Schema({
	admin: accessControl,
	hospitalUnit: accessControl,
	hospitalUnitFilters: accessControl,
	hospitalUnitEdit: accessControl,
	hospitalUnitStatus: accessControl,
	access: accessControl,
	accessPermission: accessControl,
	assignRole: accessControl,
	manageRoleandPermmission: accessControl,
	enableorDisableRole: accessControl,
	accessControlResponsibilities: accessControl,
	employeeAccessList: accessControl,
	employeeAccessListFilter: accessControl,
	employeeAccessListStatus: accessControl,
	employeeOnBoarding: accessControl,
	addNewDoctor: accessControl,
	addNewEmployee: accessControl,
	addNewRole: accessControl,
	addNewBanner: accessControl,
	addNewUnit: accessControl,
	addNewArticle: accessControl,
	addNewNotification: accessControl,
	addsettings: accessControl,
	profileManagement: accessControl,
	profile: accessControl,
	cms: accessControl,
	cmsFilters: accessControl,
	cmsDownload: accessControl,
	cmsPrint: accessControl,
	cmsPreview: accessControl,
	cmsCsv: accessControl,
	cmsPdf: accessControl,
	cmsSummary: accessControl,
	notificationManagement: accessControl,
	notificationManagementFilter: accessControl,
	notificationManagementDownload: accessControl,
	notificationManagementPrint: accessControl,
	notificationManagementPreview: accessControl,
	notificationManagementCsv: accessControl,
	notificationManagementPdf: accessControl,
	notificationManagementSummary: accessControl,
	bannerManagement: accessControl,
	bannerManagementFilter: accessControl,
	bannerManagementtDownload: accessControl,
	bannerManagementPrint: accessControl,
	bannerManagementPreview: accessControl,
	bannerManagementCsv: accessControl,
	bannerManagementPdf: accessControl,
	bannerManagementSummary: accessControl,
	settings: accessControl,
	general: accessControl,
	hospitalInformation: accessControl,
	pharmacy: accessControl,
	branches: accessControl,
});
accessControlSchema.static('findByEvent', (event: { id: string, version: number }) => {
	return AccessControl.findOne({
		_id: event.id,
		version: event.version - 1,
	});
});

accessControlSchema.static('build', (attrs: AccessControlAttrs) => {
	return new AccessControl({
		_id: attrs.id,
		admin: attrs.admin,
		hospitalUnit: attrs.hospitalUnit,
		hospitalUnitFilters: attrs.hospitalUnitFilters,
		hospitalUnitEdit: attrs.hospitalUnitEdit,
		hospitalUnitStatus: attrs.hospitalUnitStatus,
		access: attrs.access,
		accessPermission: attrs.accessPermission,
		assignRole: attrs.assignRole,
		manageRoleandPermmission: attrs.manageRoleandPermmission,
		enableorDisableRole: attrs.enableorDisableRole,
		accessControlResponsibilities: attrs.accessControlResponsibilities,
		employeeAccessList: attrs.employeeAccessList,
		employeeAccessListFilter: attrs.employeeAccessListFilter,
		employeeAccessListStatus: attrs.employeeAccessListStatus,
		employeeOnBoarding: attrs.employeeOnBoarding,
		addNewDoctor: attrs.addNewDoctor,
		addNewEmployee: attrs.addNewEmployee,
		addNewRole: attrs.addNewRole,
		addNewBanner: attrs.addNewBanner,
		addNewUnit: attrs.addNewUnit,
		addNewArticle: attrs.addNewArticle,
		addNewNotification: attrs.addNewNotification,
		addsettings: attrs.addsettings,
		profileManagement: attrs.profileManagement,
		profile: attrs.profile,
		cms: attrs.cms,
		cmsFilters: attrs.cmsFilters,
		cmsDownload: attrs.cmsDownload,
		cmsPrint: attrs.cmsPrint,
		cmsPreview: attrs.cmsPreview,
		cmsCsv: attrs.cmsCsv,
		cmsPdf: attrs.cmsPdf,
		cmsSummary: attrs.cmsSummary,
		notificationManagement: attrs.notificationManagement,
		notificationManagementFilter: attrs.notificationManagementFilter,
		notificationManagementDownload: attrs.notificationManagementDownload,
		notificationManagementPrint: attrs.notificationManagementPrint,
		notificationManagementPreview: attrs.notificationManagementPreview,
		notificationManagementCsv: attrs.notificationManagementCsv,
		notificationManagementPdf: attrs.notificationManagementPdf,
		notificationManagementSummary: attrs.notificationManagementSummary,
		bannerManagement: attrs.bannerManagement,
		bannerManagementFilter: attrs.bannerManagementFilter,
		bannerManagementtDownload: attrs.bannerManagementtDownload,
		bannerManagementPrint: attrs.bannerManagementPrint,
		bannerManagementPreview: attrs.bannerManagementPreview,
		bannerManagementCsv: attrs.bannerManagementCsv,
		bannerManagementPdf: attrs.bannerManagementPdf,
		bannerManagementSummary: attrs.bannerManagementSummary,
		settings: attrs.settings,
		general: attrs.general,
		hospitalInformation: attrs.hospitalInformation,
		pharmacy: attrs.pharmacy,
		branches: attrs.branches,
	});
});


const AccessControl = mongoose.model<AccessControlDoc, AccessControlModel>('AccessControl', accessControlSchema);

export { AccessControl };
